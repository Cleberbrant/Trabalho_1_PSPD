/**
 * @fileoverview gRPC-Web generated client stub for textprocessor
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.6
// source: textprocessor.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as textprocessor_pb from "./textprocessor_pb.wrapper.ts";

export class TextProcessorClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any }
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCountWords = new grpcWeb.MethodDescriptor(
    "/textprocessor.TextProcessor/CountWords",
    grpcWeb.MethodType.UNARY,
    textprocessor_pb.TextRequest,
    textprocessor_pb.WordCountResponse,
    (request: textprocessor_pb.TextRequest) => {
      return request.serializeBinary();
    },
    textprocessor_pb.WordCountResponse.deserializeBinary
  );

  countWords(
    request: textprocessor_pb.TextRequest,
    metadata: grpcWeb.Metadata | null
  ): Promise<textprocessor_pb.WordCountResponse>;

  countWords(
    request: textprocessor_pb.TextRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: textprocessor_pb.WordCountResponse
    ) => void
  ): grpcWeb.ClientReadableStream<textprocessor_pb.WordCountResponse>;

  countWords(
    request: textprocessor_pb.TextRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: textprocessor_pb.WordCountResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/textprocessor.TextProcessor/CountWords",
        request,
        metadata || {},
        this.methodDescriptorCountWords,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/textprocessor.TextProcessor/CountWords",
      request,
      metadata || {},
      this.methodDescriptorCountWords
    );
  }

  methodDescriptorCountCharacters = new grpcWeb.MethodDescriptor(
    "/textprocessor.TextProcessor/CountCharacters",
    grpcWeb.MethodType.UNARY,
    textprocessor_pb.TextRequest,
    textprocessor_pb.CharCountResponse,
    (request: textprocessor_pb.TextRequest) => {
      return request.serializeBinary();
    },
    textprocessor_pb.CharCountResponse.deserializeBinary
  );

  countCharacters(
    request: textprocessor_pb.TextRequest,
    metadata: grpcWeb.Metadata | null
  ): Promise<textprocessor_pb.CharCountResponse>;

  countCharacters(
    request: textprocessor_pb.TextRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: textprocessor_pb.CharCountResponse
    ) => void
  ): grpcWeb.ClientReadableStream<textprocessor_pb.CharCountResponse>;

  countCharacters(
    request: textprocessor_pb.TextRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: textprocessor_pb.CharCountResponse
    ) => void
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/textprocessor.TextProcessor/CountCharacters",
        request,
        metadata || {},
        this.methodDescriptorCountCharacters,
        callback
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/textprocessor.TextProcessor/CountCharacters",
      request,
      metadata || {},
      this.methodDescriptorCountCharacters
    );
  }

  methodDescriptorStreamWords = new grpcWeb.MethodDescriptor(
    "/textprocessor.TextProcessor/StreamWords",
    grpcWeb.MethodType.SERVER_STREAMING,
    textprocessor_pb.TextRequest,
    textprocessor_pb.WordChunk,
    (request: textprocessor_pb.TextRequest) => {
      return request.serializeBinary();
    },
    textprocessor_pb.WordChunk.deserializeBinary
  );

  streamWords(
    request: textprocessor_pb.TextRequest,
    metadata?: grpcWeb.Metadata
  ): grpcWeb.ClientReadableStream<textprocessor_pb.WordChunk> {
    return this.client_.serverStreaming(
      this.hostname_ + "/textprocessor.TextProcessor/StreamWords",
      request,
      metadata || {},
      this.methodDescriptorStreamWords
    );
  }
}
