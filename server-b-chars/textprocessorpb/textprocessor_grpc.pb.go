// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: textprocessor.proto

package textprocessorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextProcessor_CountWords_FullMethodName         = "/textprocessor.TextProcessor/CountWords"
	TextProcessor_CountCharacters_FullMethodName    = "/textprocessor.TextProcessor/CountCharacters"
	TextProcessor_StreamWords_FullMethodName        = "/textprocessor.TextProcessor/StreamWords"
	TextProcessor_CountMultipleTexts_FullMethodName = "/textprocessor.TextProcessor/CountMultipleTexts"
	TextProcessor_AnalyzeTextStream_FullMethodName  = "/textprocessor.TextProcessor/AnalyzeTextStream"
)

// TextProcessorClient is the client API for TextProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço para processamento de texto
type TextProcessorClient interface {
	// Conta palavras (Servidor A)
	CountWords(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordCountResponse, error)
	// Conta caracteres (Servidor B)
	CountCharacters(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*CharCountResponse, error)
	// 2. Server Streaming - envia texto em chunks
	StreamWords(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WordChunk], error)
	// 3. Client Streaming - recebe múltiplos textos e conta total
	CountMultipleTexts(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TextRequest, TotalCountResponse], error)
	// 4. Bidirectional Streaming - análise em tempo real
	AnalyzeTextStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TextRequest, AnalysisResponse], error)
}

type textProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewTextProcessorClient(cc grpc.ClientConnInterface) TextProcessorClient {
	return &textProcessorClient{cc}
}

func (c *textProcessorClient) CountWords(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*WordCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WordCountResponse)
	err := c.cc.Invoke(ctx, TextProcessor_CountWords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textProcessorClient) CountCharacters(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*CharCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CharCountResponse)
	err := c.cc.Invoke(ctx, TextProcessor_CountCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textProcessorClient) StreamWords(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WordChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TextProcessor_ServiceDesc.Streams[0], TextProcessor_StreamWords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TextRequest, WordChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextProcessor_StreamWordsClient = grpc.ServerStreamingClient[WordChunk]

func (c *textProcessorClient) CountMultipleTexts(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TextRequest, TotalCountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TextProcessor_ServiceDesc.Streams[1], TextProcessor_CountMultipleTexts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TextRequest, TotalCountResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextProcessor_CountMultipleTextsClient = grpc.ClientStreamingClient[TextRequest, TotalCountResponse]

func (c *textProcessorClient) AnalyzeTextStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TextRequest, AnalysisResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TextProcessor_ServiceDesc.Streams[2], TextProcessor_AnalyzeTextStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TextRequest, AnalysisResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextProcessor_AnalyzeTextStreamClient = grpc.BidiStreamingClient[TextRequest, AnalysisResponse]

// TextProcessorServer is the server API for TextProcessor service.
// All implementations must embed UnimplementedTextProcessorServer
// for forward compatibility.
//
// Serviço para processamento de texto
type TextProcessorServer interface {
	// Conta palavras (Servidor A)
	CountWords(context.Context, *TextRequest) (*WordCountResponse, error)
	// Conta caracteres (Servidor B)
	CountCharacters(context.Context, *TextRequest) (*CharCountResponse, error)
	// 2. Server Streaming - envia texto em chunks
	StreamWords(*TextRequest, grpc.ServerStreamingServer[WordChunk]) error
	// 3. Client Streaming - recebe múltiplos textos e conta total
	CountMultipleTexts(grpc.ClientStreamingServer[TextRequest, TotalCountResponse]) error
	// 4. Bidirectional Streaming - análise em tempo real
	AnalyzeTextStream(grpc.BidiStreamingServer[TextRequest, AnalysisResponse]) error
	mustEmbedUnimplementedTextProcessorServer()
}

// UnimplementedTextProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextProcessorServer struct{}

func (UnimplementedTextProcessorServer) CountWords(context.Context, *TextRequest) (*WordCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountWords not implemented")
}
func (UnimplementedTextProcessorServer) CountCharacters(context.Context, *TextRequest) (*CharCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCharacters not implemented")
}
func (UnimplementedTextProcessorServer) StreamWords(*TextRequest, grpc.ServerStreamingServer[WordChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWords not implemented")
}
func (UnimplementedTextProcessorServer) CountMultipleTexts(grpc.ClientStreamingServer[TextRequest, TotalCountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CountMultipleTexts not implemented")
}
func (UnimplementedTextProcessorServer) AnalyzeTextStream(grpc.BidiStreamingServer[TextRequest, AnalysisResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AnalyzeTextStream not implemented")
}
func (UnimplementedTextProcessorServer) mustEmbedUnimplementedTextProcessorServer() {}
func (UnimplementedTextProcessorServer) testEmbeddedByValue()                       {}

// UnsafeTextProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextProcessorServer will
// result in compilation errors.
type UnsafeTextProcessorServer interface {
	mustEmbedUnimplementedTextProcessorServer()
}

func RegisterTextProcessorServer(s grpc.ServiceRegistrar, srv TextProcessorServer) {
	// If the following call pancis, it indicates UnimplementedTextProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextProcessor_ServiceDesc, srv)
}

func _TextProcessor_CountWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorServer).CountWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextProcessor_CountWords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorServer).CountWords(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextProcessor_CountCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorServer).CountCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextProcessor_CountCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorServer).CountCharacters(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextProcessor_StreamWords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextProcessorServer).StreamWords(m, &grpc.GenericServerStream[TextRequest, WordChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextProcessor_StreamWordsServer = grpc.ServerStreamingServer[WordChunk]

func _TextProcessor_CountMultipleTexts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextProcessorServer).CountMultipleTexts(&grpc.GenericServerStream[TextRequest, TotalCountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextProcessor_CountMultipleTextsServer = grpc.ClientStreamingServer[TextRequest, TotalCountResponse]

func _TextProcessor_AnalyzeTextStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextProcessorServer).AnalyzeTextStream(&grpc.GenericServerStream[TextRequest, AnalysisResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TextProcessor_AnalyzeTextStreamServer = grpc.BidiStreamingServer[TextRequest, AnalysisResponse]

// TextProcessor_ServiceDesc is the grpc.ServiceDesc for TextProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textprocessor.TextProcessor",
	HandlerType: (*TextProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountWords",
			Handler:    _TextProcessor_CountWords_Handler,
		},
		{
			MethodName: "CountCharacters",
			Handler:    _TextProcessor_CountCharacters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWords",
			Handler:       _TextProcessor_StreamWords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CountMultipleTexts",
			Handler:       _TextProcessor_CountMultipleTexts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AnalyzeTextStream",
			Handler:       _TextProcessor_AnalyzeTextStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "textprocessor.proto",
}
