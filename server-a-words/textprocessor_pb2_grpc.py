# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import textprocessor_pb2 as textprocessor__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in textprocessor_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TextProcessorStub(object):
    """Serviço para processamento de texto
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CountWords = channel.unary_unary(
                '/textprocessor.TextProcessor/CountWords',
                request_serializer=textprocessor__pb2.TextRequest.SerializeToString,
                response_deserializer=textprocessor__pb2.WordCountResponse.FromString,
                _registered_method=True)
        self.CountCharacters = channel.unary_unary(
                '/textprocessor.TextProcessor/CountCharacters',
                request_serializer=textprocessor__pb2.TextRequest.SerializeToString,
                response_deserializer=textprocessor__pb2.CharCountResponse.FromString,
                _registered_method=True)
        self.StreamWords = channel.unary_stream(
                '/textprocessor.TextProcessor/StreamWords',
                request_serializer=textprocessor__pb2.TextRequest.SerializeToString,
                response_deserializer=textprocessor__pb2.WordChunk.FromString,
                _registered_method=True)
        self.CountMultipleTexts = channel.stream_unary(
                '/textprocessor.TextProcessor/CountMultipleTexts',
                request_serializer=textprocessor__pb2.TextRequest.SerializeToString,
                response_deserializer=textprocessor__pb2.TotalCountResponse.FromString,
                _registered_method=True)
        self.AnalyzeTextStream = channel.stream_stream(
                '/textprocessor.TextProcessor/AnalyzeTextStream',
                request_serializer=textprocessor__pb2.TextRequest.SerializeToString,
                response_deserializer=textprocessor__pb2.AnalysisResponse.FromString,
                _registered_method=True)


class TextProcessorServicer(object):
    """Serviço para processamento de texto
    """

    def CountWords(self, request, context):
        """Conta palavras (Servidor A)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountCharacters(self, request, context):
        """Conta caracteres (Servidor B)  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamWords(self, request, context):
        """Demonstrações dos 4 tipos de chamada gRPC
        1. Unary (já temos acima)

        2. Server Streaming - envia texto em chunks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountMultipleTexts(self, request_iterator, context):
        """3. Client Streaming - recebe múltiplos textos e conta total
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeTextStream(self, request_iterator, context):
        """4. Bidirectional Streaming - análise em tempo real
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CountWords': grpc.unary_unary_rpc_method_handler(
                    servicer.CountWords,
                    request_deserializer=textprocessor__pb2.TextRequest.FromString,
                    response_serializer=textprocessor__pb2.WordCountResponse.SerializeToString,
            ),
            'CountCharacters': grpc.unary_unary_rpc_method_handler(
                    servicer.CountCharacters,
                    request_deserializer=textprocessor__pb2.TextRequest.FromString,
                    response_serializer=textprocessor__pb2.CharCountResponse.SerializeToString,
            ),
            'StreamWords': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamWords,
                    request_deserializer=textprocessor__pb2.TextRequest.FromString,
                    response_serializer=textprocessor__pb2.WordChunk.SerializeToString,
            ),
            'CountMultipleTexts': grpc.stream_unary_rpc_method_handler(
                    servicer.CountMultipleTexts,
                    request_deserializer=textprocessor__pb2.TextRequest.FromString,
                    response_serializer=textprocessor__pb2.TotalCountResponse.SerializeToString,
            ),
            'AnalyzeTextStream': grpc.stream_stream_rpc_method_handler(
                    servicer.AnalyzeTextStream,
                    request_deserializer=textprocessor__pb2.TextRequest.FromString,
                    response_serializer=textprocessor__pb2.AnalysisResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'textprocessor.TextProcessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('textprocessor.TextProcessor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TextProcessor(object):
    """Serviço para processamento de texto
    """

    @staticmethod
    def CountWords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/textprocessor.TextProcessor/CountWords',
            textprocessor__pb2.TextRequest.SerializeToString,
            textprocessor__pb2.WordCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountCharacters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/textprocessor.TextProcessor/CountCharacters',
            textprocessor__pb2.TextRequest.SerializeToString,
            textprocessor__pb2.CharCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamWords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/textprocessor.TextProcessor/StreamWords',
            textprocessor__pb2.TextRequest.SerializeToString,
            textprocessor__pb2.WordChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountMultipleTexts(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/textprocessor.TextProcessor/CountMultipleTexts',
            textprocessor__pb2.TextRequest.SerializeToString,
            textprocessor__pb2.TotalCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeTextStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/textprocessor.TextProcessor/AnalyzeTextStream',
            textprocessor__pb2.TextRequest.SerializeToString,
            textprocessor__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
